using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Puzzles.SystemDesign
{
    public class ShortenUrlService
    {
        //Alphabe used in shortened url
        //Log: Many url shortening service uses these kind of logic to shorten url for mobile or twiiter use...
        //Converts lengthy url to shorten url
        //eg: For example, the URL "http://en.wikipedia.org/wiki/URL_shortening" can be shortened to "http://bit.ly/urlwiki"
        //"http://tinyurl.com/urlwiki", "http://is.gd/urlwiki" or "http://goo.gl/Gmzqv". 
        //The service itself would issue HTTP 302 redirects to avoid putting its own shortened link into the browser's history or waste the time of web crawlers or bots

        //we can use either 36 base or 62 base [a-zA-Z0-9]. It contains 62 letters.

        //We need a key to convert the given url to short key
        //the key can be generated by hash function or unique identifier for that record or database primary key
        //I'm using db identity column
        //http://stackoverflow.com/questions/742013/how-to-code-a-url-shortener
        public static readonly string Alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";
        public static readonly int Base = Alphabet.Length;
        public static readonly string servicedomainname = "http://bit.ly/";

        //Example: pass the database unique identifier interger for http://en.wikipedia.org/wiki/URL_shortening
        //and get out as Gmzqv s0 Http://goo.gl/Gmzqv
        //Input: Primary key of the db record or value of the global incrementing variable
        //output is the shortended string for the value 
        

        public static string Encode(int i)
        {
            if (i == 0) return Alphabet[0].ToString();

            StringBuilder sb = new StringBuilder();
           
            //convert the base 10 to base 62
            //125 base 10  = 2×62^1 + 1×62^0 = [2,1]
            //get the alphabet correspnsing to the number eg ba
            while (i > 0)
            {
                int remainder = i % Base;
                sb.Insert(0, Alphabet[remainder]);
                i = i / Base;
            }

            return sb.Insert(0, servicedomainname).ToString();
        }

        public static int DecodeURL(string url)
        {
            //Need to use parse method and that should return the parameter
            //Mimicing the parse method in a incorrect way
            string parameter = url.Substring(14);

            int  key =  Decode(parameter);

            //grab the key value form db and return

            return key;
            //return string.Empty;
        }

      
 
        //pass the shortened url and get the db unique identifier
//        The reverse is even easier. You just do a reverse lookup in your alphabet.

//e9a62 will be resolved to "4th, 61st, and 0th letter in alphabet".

//e9a of base 62 = [4,61,0] = 4×62^2 + 61×62^1 + 0×62^0 = 1915810

//Now find your database-record with WHERE id = 19158 and do the redirect.
        public static int Decode(string s)
        {
            var factor = 1;
            int value = 0;
 
            for(int i = s.Length -1; i >=0 ; i--)
            {
                value += factor * Alphabet.IndexOf(s[i]);
                factor = factor * Base;  
                //i = (i * Base) + Alphabet.IndexOf(c);
            }

            return value;
        }

    }

    
 
}
